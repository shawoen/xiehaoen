
from matplotlib.colors import LinearSegmentedColormap
import time
import matplotlib.dates
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from matplotlib.ticker import (LogLocator, AutoMinorLocator)
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from data_process import cal_psd
import matplotlib as mpl
import matplotlib.dates as mdates
import scipy


@plt.FuncFormatter
def fake_log(x, pos):
    return r'$10^{%d}$' % x

def plot_original_dispersion_relation(kdp_vect, omega_vect ,fig_dir, fig_file, title_str):
    fig = plt.figure(figsize=(6, 6))
    plt.title(title_str)
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.2, right=0.92, top=0.9, bottom=0.12)
    num_row, num_col = 1, 1
    ax = fig.add_subplot(num_row, num_col, 1)
    x_lim = [np.nanpercentile(kdp_vect * 0.28189, 5), np.nanpercentile(kdp_vect * 0.28189, 95)]
    y_lim = [np.nanpercentile(omega_vect * 11.59, 5), np.nanpercentile(omega_vect * 11.59, 95)]
    x_bin = np.logspace(np.log10(x_lim[0]), np.log10(x_lim[1]), 30)
    y_bin = np.logspace(np.log10(y_lim[0]), np.log10(y_lim[1]), 30)
    ax.hist2d(kdp_vect * 0.28189, omega_vect * 11.59, bins=(x_bin, y_bin), cmap='plasma')
    ax.set_xlim(x_lim[0], x_lim[1])
    ax.set_ylim(y_lim[0], y_lim[1])
    ax.set_xlabel('$k$ (1/km)', fontsize=16)
    ax.set_ylabel(r'$\omega$ (rad/s)', fontsize=16)
    ax.set_title('dispersion relation')
    ax.set_xscale('log')
    ax.set_yscale('log')
    ax.xaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.yaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=True)
    ax.text(-0.18, 1.0, '(a)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')
    plt.suptitle('Generated by compare_unnamed_method_with_pkues_direct_output .py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()


def plot_em_svd_results(mag_df, svd_dict, fig_dir, fig_file, Title_str,  resample=True, t_sample='0.15S'):
    """resample"""
    th_k_b0_df = pd.DataFrame(data=svd_dict.theta_k_b0.T, index=svd_dict.epoch)
    # th_db_b0_df = pd.DataFrame(data=svd_dict.theta_db_b0.T, index=svd_dict.epoch)
    vph_x_df = pd.DataFrame(data=svd_dict.vph_pl[0, ...].T, index=svd_dict.epoch)
    vph_y_df = pd.DataFrame(data=svd_dict.vph_pl[1, ...].T, index=svd_dict.epoch)
    vph_z_df = pd.DataFrame(data=svd_dict.vph_pl[2, ...].T, index=svd_dict.epoch)
    k_x_df = pd.DataFrame(data=svd_dict.k_pl[0, ...].T, index=svd_dict.epoch)
    k_y_df = pd.DataFrame(data=svd_dict.k_pl[1, ...].T, index=svd_dict.epoch)
    k_z_df = pd.DataFrame(data=svd_dict.k_pl[2, ...].T, index=svd_dict.epoch)
    omega_df = pd.DataFrame(data=svd_dict.omega_pl.T, index=svd_dict.epoch)
    if resample:
        th_k_b0 = th_k_b0_df.resample(t_sample).mean().values
        # th_db_b0 = th_db_b0_df.resample(t_sample).mean().values
        omega = omega_df.resample(t_sample).mean().values
        vph_x = vph_x_df.resample(t_sample).mean().values
        vph_y = vph_y_df.resample(t_sample).mean().values
        vph_z = vph_z_df.resample(t_sample).mean().values
        vph = np.sqrt(vph_x ** 2 + vph_y ** 2 + vph_z ** 2)
        k_x = k_x_df.resample(t_sample).mean().values
        k_y = k_y_df.resample(t_sample).mean().values
        k_z = k_z_df.resample(t_sample).mean().values
        k = np.sqrt(k_x ** 2 + k_y ** 2 + k_z ** 2)
    else:
        th_k_b0 = th_k_b0_df.values
        # th_db_b0 = th_db_b0_df.values
        omega = omega_df.values
        vph_x = vph_x_df.values
        vph_y = vph_y_df.values
        vph_z = vph_z_df.values
        vph = np.sqrt(vph_x ** 2 + vph_y ** 2 + vph_z ** 2)
        k_x = k_x_df.values
        k_y = k_y_df.values
        k_z = k_z_df.values
        k = np.sqrt(k_x ** 2 + k_y ** 2 + k_z ** 2)

    """plot"""
    fig = plt.figure(figsize=(10, 8))
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.1, right=0.92, top=0.95, bottom=0.1)

    num_row, num_col = 5, 1
    xlim = mdates.date2num([svd_dict.epoch[0], svd_dict.epoch[-1]])
    ylim = [np.log10(svd_dict.period[0]), np.log10(svd_dict.period[-1])]

    ax = fig.add_subplot(num_row, num_col, 1)
    ax.plot(mag_df.index, mag_df.br, 'k', linewidth=1, label='$B_R$')
    ax.plot(mag_df.index, mag_df.bt, 'r', linewidth=1, label='$B_T$')
    ax.plot(mag_df.index, mag_df.bn, 'b', linewidth=1, label='$B_N$')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_ylabel('$B$ (nT)', fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(10))
    ax.yaxis.set_minor_locator(AutoMinorLocator(10))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=False)
    ax.legend(loc=1)
    ax.text(-0.18, 1.0, '(a)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 2)
    img_arr = np.flip(th_k_b0.T, axis=0)
    v_min, v_max = 0, 180
    title_str = r'$\theta(k,B_0)$ ($^\circ$)'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, vmin=v_min, vmax=v_max, resample=False, aspect='auto',
                    extent=[xlim[0], xlim[1], ylim[0], ylim[1]])
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins)
    cax.ax.set_ylim([v_min, v_max])
    cax.ax.set_yticks([0, 45, 90, 135, 180])
    ax.text(-0.2, 1.0, '(b)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 3)
    img_arr = np.flip(vph.T, axis=0)
    v_min, v_max = np.nanpercentile(img_arr, 10), np.nanpercentile(img_arr, 90)
    title_str = r'$V_\mathrm{phase}$ (km/s)'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, norm=mpl.colors.LogNorm(vmin=v_min, vmax=v_max), resample=False,
                    aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]])
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins)
    cax.ax.set_yscale('log')
    ax.text(-0.2, 1.0, '(d)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 4)
    img_arr = np.flip(k.T, axis=0)
    v_min, v_max = np.nanpercentile(img_arr, 10), np.nanpercentile(img_arr, 90)
    title_str = '$k$ (1/km)'
    cmap_str = 'summer'
    img = ax.imshow(img_arr, cmap=cmap_str, norm=mpl.colors.LogNorm(vmin=v_min, vmax=v_max), resample=False,
                    aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]])
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins)
    cax.ax.set_yscale('log')
    ax.text(-0.2, 1.0, '(e)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 5)
    img_arr = np.flip(np.abs(omega).T, axis=0)
    v_min, v_max = np.nanpercentile(img_arr, 10), np.nanpercentile(img_arr, 90)
    title_str = r'$\omega_{pl}$ (rad/s)'
    cmap_str = 'spring'
    img = ax.imshow(img_arr, cmap=cmap_str, norm=mpl.colors.LogNorm(vmin=v_min, vmax=v_max), resample=False,
                    aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]])
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=True)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins)
    cax.ax.set_yscale('log')
    ax.text(-0.2, 1.0, '(f)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')
    ax.set_xlabel(svd_dict.epoch[0].strftime('%Y-%m-%d'), fontsize=16)
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)

    plt.suptitle('Generated by compare_unnamed_method_with_pkues_direct_output.py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()

def plot_dispersion_relation(svd_dict, fig_dir, fig_file, Title_str):
    """plot"""
    fig = plt.figure(figsize=(6, 6))
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.2, right=0.92, top=0.9, bottom=0.12)

    num_row, num_col = 1, 1
    ax = fig.add_subplot(num_row, num_col, 1)
    x_plot = np.abs(scipy.linalg.norm(svd_dict.k_pl, axis=0).reshape(-1))
    y_plot = np.abs(svd_dict.omega_pl.reshape(-1))
    x_lim = [np.nanpercentile(x_plot, 5), np.nanpercentile(x_plot, 95)]
    y_lim = [np.nanpercentile(y_plot, 5), np.nanpercentile(y_plot, 95)]
    x_bin = np.logspace(np.log10(x_lim[0]), np.log10(x_lim[1]), 30)
    y_bin = np.logspace(np.log10(y_lim[0]), np.log10(y_lim[1]), 30)
    ax.hist2d(x_plot, y_plot, bins=(x_bin, y_bin), cmap='plasma')
    ax.set_xlim(x_lim[0], x_lim[1])
    ax.set_ylim(y_lim[0], y_lim[1])
    ax.set_xlabel('$k$ (1/km)', fontsize=16)
    ax.set_ylabel(r'$\omega$ (rad/s)', fontsize=16)
    ax.set_title(Title_str + 'dispersion relation')
    ax.set_xscale('log')
    ax.set_yscale('log')
    ax.xaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.yaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=True)
    ax.text(-0.18, 1.0, '(a)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')
    plt.suptitle('Generated by get_wave_polarization_based_on_em_svd_psp.py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()


def plot_ecr_and_pdr_2d(ecr_pdr_dict, fig_dir, fig_file, Title_str, resample=False, t_sample='0.15S'):
    """resample"""
    x_ecr_df = pd.DataFrame(data=ecr_pdr_dict.x_ecr.T, index=ecr_pdr_dict.epoch)
    y_ecr_df = pd.DataFrame(data=ecr_pdr_dict.y_ecr.T, index=ecr_pdr_dict.epoch)
    z_ecr_df = pd.DataFrame(data=ecr_pdr_dict.z_ecr.T, index=ecr_pdr_dict.epoch)
    trace_ecr_df = pd.DataFrame(data=ecr_pdr_dict.trace_ecr.T, index=ecr_pdr_dict.epoch)
    para_ecr_df = pd.DataFrame(data=ecr_pdr_dict.para_ecr.T, index=ecr_pdr_dict.epoch)
    perp_ecr_df = pd.DataFrame(data=ecr_pdr_dict.perp_ecr.T, index=ecr_pdr_dict.epoch)
    x_pdr_df = pd.DataFrame(data=ecr_pdr_dict.x_pdr.T, index=ecr_pdr_dict.epoch)
    y_pdr_df = pd.DataFrame(data=ecr_pdr_dict.y_pdr.T, index=ecr_pdr_dict.epoch)
    z_pdr_df = pd.DataFrame(data=ecr_pdr_dict.z_pdr.T, index=ecr_pdr_dict.epoch)
    trace_pdr_df = pd.DataFrame(data=ecr_pdr_dict.trace_pdr.T, index=ecr_pdr_dict.epoch)
    para_pdr_df = pd.DataFrame(data=ecr_pdr_dict.para_pdr.T, index=ecr_pdr_dict.epoch)
    perp_pdr_df = pd.DataFrame(data=ecr_pdr_dict.perp_pdr.T, index=ecr_pdr_dict.epoch)
    if resample:
        x_ecr = x_ecr_df.resample(t_sample).mean().values
        y_ecr = y_ecr_df.resample(t_sample).mean().values
        z_ecr = z_ecr_df.resample(t_sample).mean().values
        trace_ecr = trace_ecr_df.resample(t_sample).mean().values
        para_ecr = para_ecr_df.resample(t_sample).mean().values
        perp_ecr = perp_ecr_df.resample(t_sample).mean().values
        x_pdr = x_pdr_df.resample(t_sample).mean().values
        y_pdr = y_pdr_df.resample(t_sample).mean().values
        z_pdr = z_pdr_df.resample(t_sample).mean().values
        trace_pdr = trace_pdr_df.resample(t_sample).mean().values
        para_pdr = para_pdr_df.resample(t_sample).mean().values
        perp_pdr = perp_pdr_df.resample(t_sample).mean().values

    else:
        x_ecr = x_ecr_df.values
        y_ecr = y_ecr_df.values
        z_ecr = z_ecr_df.values
        trace_ecr = trace_ecr_df.values
        para_ecr = para_ecr_df.values
        perp_ecr = perp_ecr_df.values
        x_pdr = x_pdr_df.values
        y_pdr = y_pdr_df.values
        z_pdr = z_pdr_df.values
        trace_pdr = trace_pdr_df.values
        para_pdr = para_pdr_df.values
        perp_pdr = perp_pdr_df.values

    """plot"""
    fig = plt.figure(figsize=(15, 10))
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.09, right=0.93, top=0.95, bottom=0.06)

    num_row, num_col = 6, 2
    xlim = mdates.date2num([ecr_pdr_dict.epoch[0], ecr_pdr_dict.epoch[-1]])
    ylim = [np.log10(ecr_pdr_dict.period[0]), np.log10(ecr_pdr_dict.period[-1])]

    ax = fig.add_subplot(num_row, num_col, 1)
    img_arr = np.flip(para_ecr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\epsilon_\mathrm{ECR,\parallel}$ ($J\cdot s^{-1}\cdot m^{-3}\cdot Hz^{-1}$)'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(a1)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 2)
    img_arr = np.flip(para_pdr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\gamma_{\parallel}$ ($s^{-1}$)'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(b1)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 3)
    img_arr = np.flip(perp_ecr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\epsilon_\mathrm{ECR,\perp}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(a2)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 4)
    img_arr = np.flip(perp_pdr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\gamma_{\perp}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(b2)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 5)
    img_arr = np.flip(trace_ecr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\epsilon_\mathrm{ECR,trace}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(a3)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 6)
    img_arr = np.flip(trace_pdr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\gamma_\mathrm{trace}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(b3)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 7)
    img_arr = np.flip(x_ecr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\epsilon_\mathrm{ECR,x}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(a4)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 8)
    img_arr = np.flip(x_pdr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\gamma_\mathrm{x}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(b4)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 9)
    img_arr = np.flip(y_ecr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\epsilon_\mathrm{ECR,y}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(a5)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 10)
    img_arr = np.flip(y_pdr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\gamma_\mathrm{y}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(b5)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 11)
    img_arr = np.flip(z_ecr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\epsilon_\mathrm{ECR,z}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_xlabel(ecr_pdr_dict.epoch[0].strftime('%Y-%m-%d'), fontsize=16)
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=True)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(a6)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 12)
    img_arr = np.flip(z_pdr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = r'$\gamma_\mathrm{z}$'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_xlabel(ecr_pdr_dict.epoch[0].strftime('%Y-%m-%d'), fontsize=16)
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=True)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(b6)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')
    plt.suptitle('Generated by compare_unnamed_method_with_pkues_direct_output .py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()


def plot_ecr_and_pdr_1d(ecr_pdr_df, fig_dir, fig_file, Title_str):
    """plot"""
    fig = plt.figure(figsize=(10, 5))
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.12, right=0.95, top=0.9, bottom=0.12)

    num_row, num_col = 1, 2
    xlim = [ecr_pdr_df.index[0], ecr_pdr_df.index[-1]]

    ax = fig.add_subplot(num_row, num_col, 1)
    ax.semilogx(ecr_pdr_df.index, ecr_pdr_df.pdr_x, 'k', linewidth=1, label=r'$\epsilon_{ECR,R}$')
    ax.semilogx(ecr_pdr_df.index, ecr_pdr_df.pdr_y, 'r', linewidth=1, label=r'$\epsilon_{ECR,T}$')
    ax.semilogx(ecr_pdr_df.index, ecr_pdr_df.pdr_z, 'b', linewidth=1, label=r'$\epsilon_{ECR,N}$')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'$\tau$ (s)', fontsize=16)
    ax.set_ylabel(r'$\gamma$ ($s^{-1}$)', fontsize=16)
    ax.xaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.yaxis.set_minor_locator(AutoMinorLocator(10))
    ax.set_title(Title_str + '1d ECR', fontsize=16)
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(a)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 2)
    ax.semilogx(ecr_pdr_df.index, ecr_pdr_df.pdr_trace, 'k', linewidth=1, label=r'$\epsilon_{ECR,trace}$')
    ax.semilogx(ecr_pdr_df.index, ecr_pdr_df.pdr_para, 'r', linewidth=1, label=r'$\epsilon_{ECR,\parallel}$')
    ax.semilogx(ecr_pdr_df.index, ecr_pdr_df.pdr_perp, 'b', linewidth=1, label=r'$\epsilon_{ECR,\perp}$')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'$\tau$ (s)', fontsize=16)
    ax.set_ylabel(r'$\gamma$ ($s^{-1}$)', fontsize=16)
    ax.set_title(Title_str + r'$\gamma$', fontsize=16)
    ax.xaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.yaxis.set_minor_locator(AutoMinorLocator(10))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(b)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')
    plt.suptitle('Generated by get_wave_polarization_based_on_em_svd_psp.py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()


def plot_angle(j_wt, fig_dir, fig_file, Title_str):

    xlim = mdates.date2num([j_wt.epoch[0], j_wt.epoch[-1]])
    ylim = [np.log10(j_wt.period[0]), np.log10(j_wt.period[-1])]
    angle_x = np.angle(j_wt.x_wt, deg=True)
    angle_y = np.angle(j_wt.y_wt, deg=True)
    angle_z = np.angle(j_wt.z_wt, deg=True)

    # Create custom colormaps
    cdict = {'red': ((0.0, 1.0, 1.0),  # Full red at the first stop
                     (0.5, 0.0, 0.0),  # No red at second stop
                     (1.0, 1.0, 1.0)),  # Full red at final stop

             'green': ((0.0, 0.0, 0.0),  # No green at all stop
                       (0.5, 0.0, 0.0),  #
                       (1.0, 0.0, 0.0)),  #

             'blue': ((0.0, 0.0, 0.0),  # No blue at first stop
                      (0.5, 1.0, 1.0),  # Full blue at second stop
                      (1.0, 0.0, 0.0))}  # No blue at final stop

    cmap = LinearSegmentedColormap('Rd_Bl_Rd', cdict, 256)

    fig = plt.figure(figsize=(15, 10))
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.09, right=0.93, top=0.95, bottom=0.06)

    ax = fig.add_subplot(3, 1, 1)
    img_arr = np.flip((angle_x).T, axis=0)
    v_min = np.nanpercentile(img_arr, 5)
    v_max = np.nanpercentile(img_arr, 95)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    title_str = ' angle_x'
    cmap_str = 'twilight'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([-180, 180])
    ax.text(-0.23, 1.0, '(1)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(3, 1, 2)
    img_arr = np.flip((angle_y).T, axis=0)
    v_min = np.nanpercentile(img_arr, 5)
    v_max = np.nanpercentile(img_arr, 95)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    title_str = ' angle_y'
    cmap_str = 'twilight'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([-180, 180])
    ax.text(-0.23, 1.0, '(2)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(3, 1, 3)
    img_arr = np.flip((angle_z).T, axis=0)
    v_min = np.nanpercentile(img_arr, 5)
    v_max = np.nanpercentile(img_arr, 95)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    title_str = ' angle_z'
    cmap_str = 'twilight'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(Title_str + title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([-180, 180])
    ax.text(-0.23, 1.0, '(3)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')
    plt.suptitle('Generated by compare_unnamed_method_with_pkues_direct_output .py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()


def plot_j_and_psd_j(j_wt_dict, fig_dir, fig_file, title_str):

    fig = plt.figure(figsize=(15, 10))
    plt.title(title_str)
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.09, right=0.93, top=0.95, bottom=0.06)

    num_row, num_col = 6, 2
    xlim = mdates.date2num([j_wt_dict.epoch[0], j_wt_dict.epoch[-1]])
    ylim = [np.log10(j_wt_dict.period[0]), np.log10(j_wt_dict.period[-1])]

    ax = fig.add_subplot(num_row, num_col, 1)
    img_arr = np.flip(np.abs(j_wt_dict.x_wt).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = '|j_x|'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(1)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 2)
    img_arr = np.flip(np.abs(j_wt_dict.y_wt).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = '|j_y|'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(2)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 3)
    img_arr = np.flip(np.abs(j_wt_dict.z_wt).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = '|j_z|'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(3)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 4)
    j_abs = np.sqrt(j_wt_dict.x_wt ** 2 + j_wt_dict.y_wt ** 2 + j_wt_dict.z_wt ** 2)
    img_arr = np.flip(np.abs(j_abs).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = '|j_abs|'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(4)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 5)
    img_arr = np.flip(np.abs(j_wt_dict.para_wt).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = '|j_para|'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(5)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    j_perp = np.abs(np.sqrt(j_abs ** 2 - j_wt_dict.para_wt ** 2))
    ax = fig.add_subplot(num_row, num_col, 6)
    img_arr = np.flip(j_perp.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = '|j_perp|'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(6)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    j_wt_dict.freq = 0
    psd_j = cal_psd(j_wt_dict)

    ax = fig.add_subplot(num_row, num_col, 7)
    img_arr = np.flip(psd_j.x_psd_arr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = 'psd_j_x'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(7)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 8)
    img_arr = np.flip(psd_j.y_psd_arr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = 'psd_j_y'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(8)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 9)
    img_arr = np.flip(psd_j.z_psd_arr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = 'psd_j_z'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(9)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 10)
    img_arr = np.flip(psd_j.trace_psd_arr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = 'psd_j_trace'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(10)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 11)
    img_arr = np.flip(psd_j.para_psd_arr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = 'psd_j_para'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(11)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 12)
    img_arr = np.flip(psd_j.perp_psd_arr.T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = 0, v_abs_max
    title_str = 'psd_j_perp'
    cmap_str = 'jet'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(12)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')
    plt.suptitle('Generated by compare_unnamed_method_with_pkues_direct_output .py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()


def plot_j_compare(j1_wt_dict, j2_wt_dict, fig_dir, fig_file, title_str):
    fig = plt.figure(figsize=(15, 10))
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.09, right=0.93, top=0.95, bottom=0.06)
    plt.title(title_str)

    num_row, num_col = 6, 2
    xlim = mdates.date2num([j1_wt_dict.epoch[0], j1_wt_dict.epoch[-1]])
    ylim = [np.log10(j1_wt_dict.period[0]), np.log10(j1_wt_dict.period[-1])]

    ax = fig.add_subplot(num_row, num_col, 1)
    img_arr = np.flip((np.abs(j1_wt_dict.x_wt / j2_wt_dict.x_wt) - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'x'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(1)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 2)
    img_arr = np.flip((np.abs(j1_wt_dict.y_wt / j2_wt_dict.y_wt) - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'y'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(2)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 3)
    img_arr = np.flip((np.abs(j1_wt_dict.z_wt / j2_wt_dict.z_wt) - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'z'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(3)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 4)
    j1_abs = np.sqrt(j1_wt_dict.x_wt ** 2 + j1_wt_dict.y_wt ** 2 + j1_wt_dict.z_wt ** 2)
    j2_abs = np.sqrt(j2_wt_dict.x_wt ** 2 + j2_wt_dict.y_wt ** 2 + j2_wt_dict.z_wt ** 2)
    img_arr = np.flip((np.abs(j1_abs / j2_abs) - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'abs'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(4)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 5)
    img_arr = np.flip((np.abs(j1_wt_dict.para_wt / j2_wt_dict.para_wt) - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'para'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(5)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    j1_perp = np.abs(np.sqrt(j1_abs ** 2 - j1_wt_dict.para_wt ** 2))
    j2_perp = np.abs(np.sqrt(j2_abs ** 2 - j2_wt_dict.para_wt ** 2))
    ax = fig.add_subplot(num_row, num_col, 6)
    img_arr = np.flip((j1_perp / j2_perp - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'perp'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(6)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    j1_wt_dict.freq = 0
    psd_j1 = cal_psd(j1_wt_dict)
    psd_j2 = cal_psd(j2_wt_dict)

    ax = fig.add_subplot(num_row, num_col, 7)
    img_arr = np.flip((psd_j1.x_psd_arr / psd_j2.x_psd_arr - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'psd_x'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(7)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 8)
    img_arr = np.flip((psd_j1.y_psd_arr / psd_j2.y_psd_arr - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'psd_y'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(8)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 9)
    img_arr = np.flip((psd_j1.z_psd_arr / psd_j2.z_psd_arr - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'psd_z'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(9)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 10)
    img_arr = np.flip((psd_j1.trace_psd_arr / psd_j2.trace_psd_arr - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'psd_trace'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(10)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 11)
    img_arr = np.flip((psd_j1.para_psd_arr / psd_j2.para_psd_arr - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'psd_j_para'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(11)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 12)
    img_arr = np.flip((psd_j1.perp_psd_arr / psd_j2.perp_psd_arr - 1).T, axis=0)
    v_abs_min = np.nanpercentile(np.abs(img_arr), 5)
    v_abs_max = np.nanpercentile(np.abs(img_arr), 95)
    v_min, v_max = -v_abs_max, v_abs_max
    title_str = 'psd_perp'
    cmap_str = 'bwr'
    img = ax.imshow(img_arr, cmap=cmap_str, resample=False, aspect='auto', extent=[xlim[0], xlim[1], ylim[0], ylim[1]],
                    norm=mpl.colors.SymLogNorm(linthresh=v_abs_min, linscale=0.03, vmin=v_min, vmax=v_max))
    ax.xaxis_date()
    ax.set_ylabel('period (s)', fontsize=16)
    ax.set_title(title_str, fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    date_format = mpl.dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(date_format)
    ax.yaxis.set_major_formatter(fake_log)
    ax.tick_params(axis='both', which='both', labelsize=16, labelbottom=False)
    axins = inset_axes(ax,
                       width="2%",
                       height="100%",
                       loc='lower left',
                       bbox_to_anchor=(1.02, 0., 1, 1),
                       bbox_transform=ax.transAxes,
                       borderpad=0,
                       )
    cax = plt.colorbar(img, ax=ax, cax=axins, extend='both')
    cax.ax.set_ylim([v_min, v_max])
    ax.text(-0.23, 1.0, '(12)', transform=ax.transAxes, fontsize='12', va='bottom', fontweight='bold')
    plt.suptitle('Generated by compare_unnamed_method_with_pkues_direct_output .py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()


def plot_j_1d(j, fig_dir, fig_file, title_str):
    """plot"""
    fig = plt.figure(figsize=(10, 5))
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.12, right=0.95, top=0.9, bottom=0.12)
    plt.title(title_str)

    num_row, num_col = 2, 2
    xlim = [j.period[0], j.period[-1]]

    ax = fig.add_subplot(num_row, num_col, 1)
    start_time = time.time()
    ax.semilogx(j.period, j.x_lst, 'k', linewidth=1, label=r'|j_x|')
    ax.semilogx(j.period, j.y_lst, 'r', linewidth=1, label=r'|j_y|')
    ax.semilogx(j.period, j.z_lst, 'b', linewidth=1, label=r'|j_z|')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'$\tau$ (s)', fontsize=16)
    ax.set_ylabel(r'|j|(miuA)', fontsize=16)
    end_time = time.time()
    print('first last', end_time - start_time)
    start_time = time.time()
    ax.xaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.yaxis.set_minor_locator(AutoMinorLocator(10))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(a)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')
    end_time = time.time()
    print("second last", end_time - start_time)

    start_time = time.time()
    ax = fig.add_subplot(num_row, num_col, 2)
    ax.semilogx(j.period, j.trace_lst, 'k', linewidth=1, label=r'|j_abs|')
    ax.semilogx(j.period, j.para_lst, 'r', linewidth=1, label=r'|j_para|')
    ax.semilogx(j.period, j.perp_lst, 'b', linewidth=1, label=r'|j_perp|')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'$/tau$ (s)', fontsize=16)
    ax.set_ylabel(r'|j|(miuA)', fontsize=16)
    ax.xaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.yaxis.set_minor_locator(AutoMinorLocator(10))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(b)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')
    end_time = time.time()
    print("third last", end_time - start_time)

    start_time = time.time()
    ax = fig.add_subplot(num_row, num_col, 3)
    ax.semilogx(j.period, j.x_psd_lst, 'k', linewidth=1, label=r'psd_Jx')
    ax.semilogx(j.period, j.y_psd_lst, 'r', linewidth=1, label=r'psd_Jy')
    ax.semilogx(j.period, j.z_psd_lst, 'b', linewidth=1, label=r'psd_Jz')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'$\tau$ (s)', fontsize=16)
    ax.set_ylabel(r'|j^2|(miuA^2)', fontsize=16)
    ax.xaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.yaxis.set_minor_locator(AutoMinorLocator(10))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(c)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')
    end_time = time.time()
    print("forth last", end_time - start_time)

    start_time = time.time()
    ax = fig.add_subplot(num_row, num_col, 4)
    ax.semilogx(j.period, j.trace_psd_lst, 'k', linewidth=1, label=r'psd_J_trace')
    ax.semilogx(j.period, j.para_psd_lst, 'r', linewidth=1, label=r' psd_J_para')
    ax.semilogx(j.period, j.perp_psd_lst, 'b', linewidth=1, label=r'psd_J_perp')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'$\tau$ (s)', fontsize=16)
    ax.set_ylabel(r'|j^2|(miuA^2)', fontsize=16)
    ax.xaxis.set_minor_locator(LogLocator(base=10, subs=np.arange(0.1, 1, 0.1), numticks=10))
    ax.yaxis.set_minor_locator(AutoMinorLocator(10))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(d)', transform=ax.transAxes, fontsize='16', va='bottom', fontweight='bold')
    plt.suptitle('Generated by compare_unnamed_method_with_pkues_direct_output .py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()
    end_time = time.time()
    print("last last", end_time - start_time)


def plot_j_time_series(j_pkues_df, mag_df, ele_df, fig_dir, fig_file):
    """plot"""
    fig = plt.figure(figsize=(10, 5))
    plt.subplots_adjust(wspace=0.4, hspace=0.3, left=0.12, right=0.95, top=0.9, bottom=0.12)
    plt.title('j_time_series')

    num_row, num_col = 3, 1
    xlim = [j_pkues_df.index[0], j_pkues_df.index[-1]]

    ax = fig.add_subplot(num_row, num_col, 1)
    ax.plot(j_pkues_df.index, j_pkues_df.j_x, 'k', linewidth=1, label=r'j_x')
    ax.plot(j_pkues_df.index, j_pkues_df.j_y, 'r', linewidth=1, label=r'j_y')
    ax.plot(j_pkues_df.index, j_pkues_df.j_z, 'b', linewidth=1, label=r'j_z')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'time', fontsize=16)
    ax.set_ylabel(r'j(miuA)', fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    ax.yaxis.set_minor_locator(AutoMinorLocator(6))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(a)', transform=ax.transAxes, fontsize=16, va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 2)
    ax.plot(mag_df.index, mag_df.bt, 'k', linewidth=1, label=r'B_x')
    ax.plot(mag_df.index, mag_df.bn, 'r', linewidth=1, label=r'B_y')
    ax.plot(mag_df.index, mag_df.br, 'b', linewidth=1, label=r'B_z')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'time', fontsize=16)
    ax.set_ylabel(r'B(nT)', fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    ax.yaxis.set_minor_locator(AutoMinorLocator(6))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(b)', transform=ax.transAxes, fontsize=16, va='bottom', fontweight='bold')

    ax = fig.add_subplot(num_row, num_col, 3)
    ax.plot(ele_df.index, ele_df.et, 'k', linewidth=1, label=r'e_x')
    ax.plot(ele_df.index, ele_df.en, 'r', linewidth=1, label=r'e_y')
    ax.plot(ele_df.index, ele_df.er, 'b', linewidth=1, label=r'e_z')
    ax.set_xlim(xlim[0], xlim[1])
    ax.set_xlabel(r'time', fontsize=16)
    ax.set_ylabel(r'e(mV/m)', fontsize=16)
    ax.xaxis.set_minor_locator(AutoMinorLocator(6))
    ax.yaxis.set_minor_locator(AutoMinorLocator(6))
    ax.tick_params(axis='both', which='major', labelsize=16, labelbottom=True)
    ax.legend(loc=1)
    ax.text(-0.25, 1.05, '(c)', transform=ax.transAxes, fontsize=16, va='bottom', fontweight='bold')
    plt.suptitle('Generated by compare_unnamed_method_with_pkues_direct_output .py', x=0.95, y=0.05, fontsize=8,
                 color='gray', ha='right', va='bottom')
    plt.savefig(fig_dir + fig_file, dpi=300)
    plt.close()
